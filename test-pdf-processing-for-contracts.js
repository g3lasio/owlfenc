/**
 * Pruebas exhaustivas para el procesamiento de PDF para contratos
 * 
 * Este script verifica el procesamiento de PDFs para la extracci√≥n de datos
 * y la posterior generaci√≥n de contratos basados en esos datos.
 */
const fs = require('fs').promises;
const FormData = require('form-data');
const axios = require('axios');
const path = require('path');
const assert = require('assert');

// Configuraci√≥n y helpers
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';
const TEST_FILES_DIR = path.join(__dirname, 'test-files');
const OUTPUT_DIR = path.join(__dirname, 'test-output');

// Crear directorios necesarios
async function setup() {
  try {
    await fs.mkdir(TEST_FILES_DIR, { recursive: true });
    await fs.mkdir(OUTPUT_DIR, { recursive: true });
    console.log(`Directorios creados: ${TEST_FILES_DIR}, ${OUTPUT_DIR}`);
    
    // Crear un PDF de prueba simple si no existe
    const samplePdfPath = path.join(TEST_FILES_DIR, 'sample-estimate.pdf');
    try {
      await fs.access(samplePdfPath);
      console.log('Archivo PDF de prueba ya existe');
    } catch (e) {
      console.log('Creando PDF de prueba simple...');
      await createSamplePdf(samplePdfPath);
    }
  } catch (error) {
    console.error('Error en setup:', error);
    throw error;
  }
}

// Helper para crear un PDF de prueba simple
async function createSamplePdf(filePath) {
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Presupuesto de Prueba</title>
      <style>
        body { font-family: Arial, sans-serif; }
        .header { text-align: center; margin-bottom: 20px; }
        .company { font-weight: bold; }
        .client { margin: 20px 0; }
        .project { margin: 20px 0; }
        .footer { margin-top: 30px; text-align: center; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Presupuesto para Instalaci√≥n de Cerca</h1>
        <div class="company">Cercas El Maestro S.A. de C.V.</div>
        <div>RFC: XAXX010101000</div>
        <div>Tel: (55) 1234-5678</div>
      </div>
      
      <div class="client">
        <h2>Cliente:</h2>
        <div>Nombre: Carlos Rodr√≠guez Gonz√°lez</div>
        <div>Direcci√≥n: Calle Roble #123, Col. Bosques, Ciudad de M√©xico</div>
        <div>Tel√©fono: (55) 8765-4321</div>
        <div>Email: carlos.rodriguez@email.com</div>
      </div>
      
      <div class="project">
        <h2>Detalles del Proyecto:</h2>
        <div>Tipo de Cerca: Privacidad</div>
        <div>Material: Cedro tratado a presi√≥n</div>
        <div>Altura: 2.4 metros (8 pies)</div>
        <div>Longitud total: 45 metros</div>
        <div>Incluye: 1 puerta sencilla y 1 puerta doble</div>
      </div>
      
      <div class="pricing">
        <h2>Costos:</h2>
        <div>Materiales: $25,800 MXN</div>
        <div>Mano de obra: $18,400 MXN</div>
        <div>Puertas: $9,500 MXN</div>
        <div><strong>Total: $53,700 MXN</strong></div>
      </div>
      
      <div class="footer">
        <p>Presupuesto v√°lido por 30 d√≠as a partir de la fecha</p>
        <p>Fecha: ${new Date().toLocaleDateString()}</p>
      </div>
    </body>
    </html>
  `;
  
  try {
    // Utilizamos la API interna para generar el PDF
    const response = await axios.post(
      `${API_BASE_URL}/api/generate-pdf`,
      {
        html,
        filename: 'sample-estimate.pdf'
      },
      {
        responseType: 'arraybuffer'
      }
    );
    
    const pdfBuffer = Buffer.from(response.data);
    await fs.writeFile(filePath, pdfBuffer);
    console.log(`PDF de prueba creado en: ${filePath}`);
  } catch (error) {
    console.error('Error creando PDF de prueba:', error);
    
    // Si falla la generaci√≥n del PDF, crear un archivo de texto como alternativa
    console.log('Creando archivo de texto alternativo...');
    await fs.writeFile(
      filePath.replace('.pdf', '.txt'),
      'Este es un archivo de texto alternativo para pruebas.\n' +
      'Cliente: Carlos Rodr√≠guez\n' +
      'Proyecto: Cerca de privacidad de 8 pies\n' +
      'Total: $53,700 MXN'
    );
  }
}

// Test 1: Procesamiento de PDF y extracci√≥n de datos
async function testPdfProcessing() {
  console.log('\nüß™ TEST 1: Procesamiento de PDF y extracci√≥n de datos');
  
  try {
    const pdfPath = path.join(TEST_FILES_DIR, 'sample-estimate.pdf');
    
    // Crear FormData para enviar el archivo
    const formData = new FormData();
    const fileBuffer = await fs.readFile(pdfPath);
    formData.append('pdf', fileBuffer, { filename: 'sample-estimate.pdf' });
    
    // Enviar el PDF a la API
    const response = await axios.post(
      `${API_BASE_URL}/api/process-pdf`,
      formData,
      {
        headers: {
          ...formData.getHeaders(),
        }
      }
    );
    
    const result = response.data;
    
    // Verificar que la respuesta contenga los datos extra√≠dos
    assert(result.extractedData, 'La respuesta debe contener datos extra√≠dos');
    assert(result.extractedData.clientName, 'Los datos deben incluir el nombre del cliente');
    assert(result.extractedData.projectDetails, 'Los datos deben incluir detalles del proyecto');
    
    console.log('Datos extra√≠dos del PDF:', JSON.stringify(result.extractedData, null, 2));
    console.log('‚úÖ Test de procesamiento de PDF EXITOSO');
    
    return result.extractedData;
  } catch (error) {
    console.error('‚ùå Error en test de procesamiento de PDF:', error.message);
    if (error.response) {
      console.error('Detalles del error:', error.response.data);
    }
    throw error;
  }
}

// Test 2: Generaci√≥n de contrato a partir de datos extra√≠dos
async function testContractGenerationFromExtractedData(extractedData) {
  console.log('\nüß™ TEST 2: Generaci√≥n de contrato a partir de datos extra√≠dos');
  
  try {
    // A√±adir algunos datos adicionales que podr√≠an faltar en la extracci√≥n
    const enhancedData = {
      ...extractedData,
      projectId: 'PDF-EXTRACT-' + Date.now()
    };
    
    // Generar contrato usando los datos extra√≠dos
    const response = await axios.post(
      `${API_BASE_URL}/api/generate-contract`,
      {
        projectDetails: enhancedData
      }
    );
    
    const html = response.data.html;
    assert(html, 'El HTML del contrato no puede estar vac√≠o');
    
    // Verificar que el contrato contenga informaci√≥n del cliente extra√≠da del PDF
    if (enhancedData.clientName) {
      assert(html.includes(enhancedData.clientName), 'El HTML debe contener el nombre del cliente extra√≠do');
    }
    
    // Guardar HTML para inspecci√≥n
    await fs.writeFile(path.join(OUTPUT_DIR, 'contract-from-pdf.html'), html);
    console.log('‚úÖ Test de generaci√≥n de contrato desde datos extra√≠dos EXITOSO');
    console.log(`   HTML guardado en: ${path.join(OUTPUT_DIR, 'contract-from-pdf.html')}`);
    
    return html;
  } catch (error) {
    console.error('‚ùå Error en test de generaci√≥n de contrato desde datos extra√≠dos:', error.message);
    if (error.response) {
      console.error('Detalles del error:', error.response.data);
    }
    throw error;
  }
}

// Test 3: Generaci√≥n de PDF a partir del contrato
async function testPdfGenerationFromExtractedData(html) {
  console.log('\nüß™ TEST 3: Generaci√≥n de PDF a partir del contrato');
  
  try {
    const filename = `contract-from-pdf-${Date.now()}.pdf`;
    
    // Generar PDF
    const response = await axios.post(
      `${API_BASE_URL}/api/generate-pdf`,
      {
        html,
        filename
      },
      {
        responseType: 'arraybuffer'
      }
    );
    
    // Verificar que la respuesta sea un PDF
    const contentType = response.headers['content-type'];
    assert(contentType === 'application/pdf', `El tipo de contenido debe ser PDF, pero es: ${contentType}`);
    
    // Guardar PDF para inspecci√≥n
    const pdfPath = path.join(OUTPUT_DIR, filename);
    await fs.writeFile(pdfPath, Buffer.from(response.data));
    console.log('‚úÖ Test de generaci√≥n de PDF a partir del contrato EXITOSO');
    console.log(`   PDF guardado en: ${pdfPath}`);
    
    return pdfPath;
  } catch (error) {
    console.error('‚ùå Error en test de generaci√≥n de PDF:', error.message);
    if (error.response) {
      console.error('Detalles del error:', error.response.data);
    }
    throw error;
  }
}

// Funci√≥n para generar un PDF alternativo si no tenemos acceso a la API de procesamiento
async function createAlternativeTestData() {
  console.log('Generando datos alternativos para pruebas...');
  return {
    clientName: 'Carlos Rodr√≠guez Gonz√°lez',
    address: 'Calle Roble #123, Col. Bosques, Ciudad de M√©xico',
    phone: '(55) 8765-4321',
    email: 'carlos.rodriguez@email.com',
    projectDetails: {
      fenceType: 'Privacidad',
      fenceMaterial: 'Cedro tratado a presi√≥n',
      fenceHeight: '8',
      fenceLength: '45',
    },
    total: 53700,
    depositAmount: 26850,
    gates: [
      { type: 'Puerta sencilla', width: '3', height: '6', quantity: 1, price: 3500 },
      { type: 'Puerta doble', width: '6', height: '6', quantity: 1, price: 6000 }
    ]
  };
}

// Ejecutar todas las pruebas
async function runAllTests() {
  try {
    console.log('üöÄ Iniciando pruebas de procesamiento de PDF para contratos...');
    await setup();
    
    let extractedData;
    
    // Test de procesamiento de PDF
    try {
      extractedData = await testPdfProcessing();
    } catch (error) {
      console.warn('‚ö†Ô∏è Test de procesamiento de PDF fall√≥, usando datos alternativos...');
      extractedData = await createAlternativeTestData();
    }
    
    // Test de generaci√≥n de contrato con datos extra√≠dos
    const contractHtml = await testContractGenerationFromExtractedData(extractedData);
    
    // Test de generaci√≥n de PDF
    await testPdfGenerationFromExtractedData(contractHtml);
    
    console.log('\n‚úÖ‚úÖ‚úÖ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE ‚úÖ‚úÖ‚úÖ');
  } catch (error) {
    console.error('\n‚ùå‚ùå‚ùå ALGUNAS PRUEBAS FALLARON ‚ùå‚ùå‚ùå');
    console.error(`Error: ${error.message}`);
    process.exit(1);
  }
}

// Ejecutar las pruebas
runAllTests();